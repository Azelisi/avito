from aiogram import F, types, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import flags

from src.config.cfg import bot
from src.keyboards.inline import menu_kb, return_to_main_kb, how_many_day_sub_banks, how_many_day_sub_crypt, \
    MyCallBack, type_of_payment
from src.handlers.cryptomus import create_invoice
from src.parser.database import get_all_ads

import asyncio

# from src.rabbitmq.rabbitmq import RabbitMQSender

# rabbitmq_sender = RabbitMQSender()

router = Router()


# result_pars = pars()

# –†–æ—É—Ç–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é..

@router.message(F.text == '/start')
async def get_talk(message: Message, state: FSMContext):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä!", reply_markup=menu_kb)


# –†–æ—É—Ç–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è...

@router.callback_query(MyCallBack.filter(F.foo == 'return_to_main'))
async def get_to_main(query: CallbackQuery, callback_data: MyCallBack):
    await query.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
    await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å", reply_markup=menu_kb)


@router.callback_query(MyCallBack.filter(F.foo == 'return_typeOfPay'))
async def get_to_main(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=type_of_payment)


# –†–æ—É—Ç–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..

@router.callback_query(MyCallBack.filter(F.foo == 'info'))
async def callback_info(query: CallbackQuery, callback_data: MyCallBack):
    await query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Å–∏–Ω–≥–µ")
    await query.message.edit_text('–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!\n–í–æ—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥',
                                  reply_markup=return_to_main_kb)
    print(f'{query.data} and {type(query.data)}')


# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..

@router.callback_query(MyCallBack.filter(F.foo == 'pay'))
async def top_up_user(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=type_of_payment)


# –î–ª—è –±–∞–Ω–∫–æ–≤
@router.callback_query(MyCallBack.filter(F.foo == 'pay_bank'))
async def top_up_user_bank(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text(
        "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n7 –¥–Ω–µ–π - <b>599 RUB</b>\n14 –¥–Ω–µ–π - <b>999 RUB</b>\n30 –¥–Ω–µ–π - <b>1799 RUB</b>",
        parse_mode='HTML', reply_markup=how_many_day_sub_banks)


# –î–ª—è –∫—Ä–∏–ø—Ç—ã
@router.callback_query(MyCallBack.filter(F.foo == 'pay_crypt'))
async def top_up_user_crypt(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text(
        "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n7 –¥–Ω–µ–π - <b>599 RUB</b>\n14 –¥–Ω–µ–π - <b>999 RUB</b>\n30 –¥–Ω–µ–π - <b>1799 RUB</b>",
        parse_mode='HTML', reply_markup=how_many_day_sub_crypt)


@router.callback_query(MyCallBack.filter(F.foo == 'sub_crypt_7'))
async def top_up_user_crypt_7(query: CallbackQuery, callback_data: MyCallBack):
    invoice = await create_invoice(query.message.from_user.id, 599)
    markup = InlineKeyboardBuilder().button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f'o_{invoice["result"]["uuid"]}')
    await query.message.edit_text(f"–í–∞—à —á–µ–∫: {invoice['result']['url']} ", reply_markup=markup)


@router.callback_query(MyCallBack.filter(F.foo == 'sub_crypt_14'))
async def top_up_user_crypt_14(query: CallbackQuery, callback_data: MyCallBack):
    invoice = await create_invoice(query.message.from_user.id, 999)
    markup = InlineKeyboardBuilder().button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f'o_{invoice["result"]["uuid"]}')
    await query.message.edit_text(f"–í–∞—à —á–µ–∫: {invoice['result']['url']} ", reply_markup=markup)


@router.callback_query(MyCallBack.filter(F.foo == 'sub_crypt_30'))
async def top_up_user_crypt_30(query: CallbackQuery, callback_data: MyCallBack):
    invoice = await create_invoice(query.message.from_user.id, 1799)
    markup = InlineKeyboardBuilder().button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f'o_{invoice["result"]["uuid"]}')
    await query.message.edit_text(f"–í–∞—à —á–µ–∫: {invoice['result']['url']} ", reply_markup=markup)


# –í –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
sent_notifications = {}
parser_states = {}


async def parse_and_send_notifications(user_id):
    global parser_states
    while parser_states.get(user_id, False):

        await asyncio.sleep(2)  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        new_ad_text = get_all_ads()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ad_text = new_ad_text[0][1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ—Ä—Ç–µ–∂–∞
        formatted_message = format_message(ad_text)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è

        if user_id not in sent_notifications:
            sent_notifications[user_id] = set()

        if formatted_message not in sent_notifications[user_id]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(user_id, formatted_message, parse_mode="HTML")
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_notifications[user_id].add(formatted_message)
            print(sent_notifications)

        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        print(parser_states)
        await asyncio.sleep(3)


def format_message(ad_text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ç–µ–≥–∞ <b>
    format_text = ad_text.split('\n')
    return "<b>" + "</b>\n<b>".join(format_text) + "</b>"


@router.message(F.text.lower().strip() == '—Å—Ç–æ–ø')
async def stop_pars(message: Message):
    global parser_states
    user_id = message.from_user.id
    parser_states[user_id] = False
    await message.answer("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üò¥", reply_markup=menu_kb)
    del sent_notifications[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –†–æ—É—Ç–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞..
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –Ω–∞ —Ç–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω (—Ç–æ –µ—Å—Ç—å, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_id –∏ sub_status –∏ –µ—Å–ª–∏ sub_status —Ä–∞–≤–µ–Ω 1 —Ç–æ –≤—Å—ë –∑–∞–µ–±–∏—Å–±)
@router.callback_query(MyCallBack.filter(F.foo == 'parsing'))
async def start_process_of_pars(query: types.CallbackQuery, callback_data: MyCallBack):
    global parser_states
    user_id = query.from_user.id

    print(f"Start parsing cycle for user {user_id}, {query.data}")

    if not parser_states.get(user_id, False):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –ø–∞—Ä—Å–µ—Ä, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        parser_states[user_id] = True
        await query.message.answer(
            "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω üöÄ\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏ - <b>–°—Ç–æ–ø</b>",
            parse_mode="HTML")
        await asyncio.create_task(parse_and_send_notifications(user_id))
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª –ø–∞—Ä—Å–µ—Ä
        await query.message.answer("–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω üòä")